// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutOfOffice.DataAccess.Data;

#nullable disable

namespace OutOfOffice.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ce7db7fd-ba3f-4cc7-8d37-a831b0725379",
                            Name = "HR manager",
                            NormalizedName = "HR MANAGER"
                        },
                        new
                        {
                            Id = "57bde49e-8d41-45c4-baea-29141e2b2b6c",
                            Name = "Project manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "92d723f4-81c5-4109-b962-bbec93185fe7",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            RoleId = "ce7db7fd-ba3f-4cc7-8d37-a831b0725379"
                        },
                        new
                        {
                            UserId = "8825ba1e-f826-42fa-bc2c-bca4a91e64af",
                            RoleId = "ce7db7fd-ba3f-4cc7-8d37-a831b0725379"
                        },
                        new
                        {
                            UserId = "c97575f3-7279-42a7-a52c-8c9c04e5d8b6",
                            RoleId = "57bde49e-8d41-45c4-baea-29141e2b2b6c"
                        },
                        new
                        {
                            UserId = "39040db5-17ed-4437-9454-86218e9f2a21",
                            RoleId = "57bde49e-8d41-45c4-baea-29141e2b2b6c"
                        },
                        new
                        {
                            UserId = "3c155c25-ef31-41c0-9023-dbf59506d2c2",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        },
                        new
                        {
                            UserId = "efa05cf9-5f6f-41ff-a3b7-a4b2d40739ef",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        },
                        new
                        {
                            UserId = "df501ef6-7187-4126-82fc-d3dce8f7c73e",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        },
                        new
                        {
                            UserId = "357af2a2-5650-48b8-81af-6d1355b94d98",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OutOfOfficeBalance")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeoplePartnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdivision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PeoplePartnerId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5766e4aa-4934-422a-8cb7-b860d560873b",
                            EmailConfirmed = false,
                            FullName = "Denis McBoss",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAENs64pUVmZly/iLiuTd2zs1dwTNLz6shbC6JtvIKXqGXIkT8nlH3aIGf0cSCU7pFJQ==",
                            PeoplePartnerId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            PhoneNumberConfirmed = false,
                            Position = "Administrator",
                            SecurityStamp = "86465aef-4ad8-460a-89cb-fb4e75137130",
                            Status = "Active",
                            Subdivision = "Administration",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e4c3a7-0a0e-4476-8a24-e43bb6d4c8dc",
                            EmailConfirmed = false,
                            FullName = "Alyssa Kennedy",
                            LockoutEnabled = false,
                            NormalizedUserName = "HRMANAGER@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEMEJgl1sKj677opF/zBQI9QZaGB3JjGkPSf7IMBMujJvSglhW/FTjqssd7mX+m/b/w==",
                            PeoplePartnerId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "\\photos\\780bde51-e8e8-43ca-8db4-cda2e4ff4248.png",
                            Position = "HR manager",
                            SecurityStamp = "61274506-dcdd-431d-ab77-068efcaa5968",
                            Status = "Active",
                            Subdivision = "Human Resources",
                            TwoFactorEnabled = false,
                            UserName = "hrmanager@gmail.com"
                        },
                        new
                        {
                            Id = "8825ba1e-f826-42fa-bc2c-bca4a91e64af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48b4a261-8bc2-4a87-9a26-e88ef013ee64",
                            EmailConfirmed = false,
                            FullName = "Ciara Montes",
                            LockoutEnabled = false,
                            NormalizedUserName = "HRMANAGER2@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEFJeRl/kRlQp2U5WipVk6Ht2n5rNszYRb6FbKNMtbPamxFdr9mOkY1Md7Lz5muI+Bw==",
                            PeoplePartnerId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            PhoneNumberConfirmed = false,
                            Position = "HR manager",
                            SecurityStamp = "dbeb77bc-cf02-4244-97f0-fc207fb96342",
                            Status = "Active",
                            Subdivision = "Human Resources",
                            TwoFactorEnabled = false,
                            UserName = "hrmanager2@gmail.com"
                        },
                        new
                        {
                            Id = "c97575f3-7279-42a7-a52c-8c9c04e5d8b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0862528-3a22-4e8b-9d61-d5721360dd94",
                            EmailConfirmed = false,
                            FullName = "Oliver Dodger",
                            LockoutEnabled = false,
                            NormalizedUserName = "PROJECTMANAGER@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEJn8WKxmo8hfkYLjjdvD4Z1x7Obods3cXwcbTc7NgSacvH8j6dANbDzDmSuNfinz+w==",
                            PeoplePartnerId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "\\photos\\16c0f1a5-2d26-4be6-a690-2383571bf409.png",
                            Position = "Project manager",
                            SecurityStamp = "aaeb52bb-766d-4883-b8d8-475896bb163e",
                            Status = "Active",
                            Subdivision = "IT",
                            TwoFactorEnabled = false,
                            UserName = "projectmanager@gmail.com"
                        },
                        new
                        {
                            Id = "39040db5-17ed-4437-9454-86218e9f2a21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "783606fd-0629-4870-b6db-2a66eded11a2",
                            EmailConfirmed = false,
                            FullName = "Khalil O'Reilly",
                            LockoutEnabled = false,
                            NormalizedUserName = "PROJECTMANAGER2@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEHSR9SGNIcSRWqGyNJNFLrWP1LPnSCdO11MeCgCwEA6SzyaEewZ/FbpYKhatyuWxUg==",
                            PeoplePartnerId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            PhoneNumberConfirmed = false,
                            Position = "Project manager",
                            SecurityStamp = "e4395ece-87bb-437b-b597-e9ccccf5abba",
                            Status = "Active",
                            Subdivision = "Marketing",
                            TwoFactorEnabled = false,
                            UserName = "projectmanager2@gmail.com"
                        },
                        new
                        {
                            Id = "3c155c25-ef31-41c0-9023-dbf59506d2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c40c00a6-6941-42c7-8ccb-08dd9160d9c6",
                            EmailConfirmed = false,
                            FullName = "Grace Carney",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE1@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAECf5q65l+527WS/+Y6wI9LAwD0EW+e9Y2ez5R9qDWyzuTeqcdrNcr2TMFAokDOcmKA==",
                            PeoplePartnerId = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            PhoneNumberConfirmed = false,
                            Position = "Back-end developer",
                            SecurityStamp = "639beb1c-87d9-4ac4-91b4-aaaeb959488b",
                            Status = "Active",
                            Subdivision = "IT",
                            TwoFactorEnabled = false,
                            UserName = "employee1@gmail.com"
                        },
                        new
                        {
                            Id = "efa05cf9-5f6f-41ff-a3b7-a4b2d40739ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b399f647-b2b7-4f4d-9f37-3ed4bf7731f1",
                            EmailConfirmed = false,
                            FullName = "Justin Valencia",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE2@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAENW2uqvaS250ynLl1PwZD1kcl1niT1c7+mz0hFO/oEbfVSk4JzDrFvxxwkKjiNucyQ==",
                            PeoplePartnerId = "8825ba1e-f826-42fa-bc2c-bca4a91e64af",
                            PhoneNumberConfirmed = false,
                            Position = "Accountant",
                            SecurityStamp = "3ea5b7e5-006d-4a7d-9034-910fb158f7e9",
                            Status = "Active",
                            Subdivision = "Sales",
                            TwoFactorEnabled = false,
                            UserName = "employee2@gmail.com"
                        },
                        new
                        {
                            Id = "df501ef6-7187-4126-82fc-d3dce8f7c73e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e74496e-5b17-48ed-bf7e-1b5c22870a50",
                            EmailConfirmed = false,
                            FullName = "Mia Irwin",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE3@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEBCQJkyZ5FFuJX8HNctn7QUK/ErMfoRXJ1AsOl/auIxF0mNOiIsgn0cAWrBZdpQkZw==",
                            PeoplePartnerId = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            PhoneNumberConfirmed = false,
                            Position = "Sales manager",
                            SecurityStamp = "cf078be3-a5d2-48e2-a565-5638e59e7d38",
                            Status = "Active",
                            Subdivision = "Finance",
                            TwoFactorEnabled = false,
                            UserName = "employee3@gmail.com"
                        },
                        new
                        {
                            Id = "357af2a2-5650-48b8-81af-6d1355b94d98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f218d52-d40c-4a68-92d0-8eeda8519b52",
                            EmailConfirmed = false,
                            FullName = "Ibraheem Harrison",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE4@GMAIL.COM",
                            OutOfOfficeBalance = 30,
                            PasswordHash = "AQAAAAIAAYagAAAAEHBQaM8nApc8ZBsMA/USB7d9OsGU11AWfaKJYqRypuq1rgObpDg6e3Sef5KmqYyyBA==",
                            PeoplePartnerId = "8825ba1e-f826-42fa-bc2c-bca4a91e64af",
                            PhoneNumberConfirmed = false,
                            Position = "Receptionist",
                            SecurityStamp = "78a8caf2-7934-4ee5-b6de-7ce22c8e52d7",
                            Status = "Active",
                            Subdivision = "Marketing",
                            TwoFactorEnabled = false,
                            UserName = "employee4@gmail.com"
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsenceReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequest");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("LeaveRequestId");

                    b.ToTable("LeaveRequestApproval");
                });

            modelBuilder.Entity("OutOfOffice.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "PeoplePartner")
                        .WithMany()
                        .HasForeignKey("PeoplePartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PeoplePartner");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequest", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestApproval", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.LeaveRequest", "LeaveRequest")
                        .WithMany()
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("OutOfOffice.Models.Project", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
