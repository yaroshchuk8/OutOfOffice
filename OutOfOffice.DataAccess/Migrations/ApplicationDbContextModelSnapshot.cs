// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutOfOffice.DataAccess.Data;

#nullable disable

namespace OutOfOffice.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ce7db7fd-ba3f-4cc7-8d37-a831b0725379",
                            Name = "HR manager",
                            NormalizedName = "HR MANAGER"
                        },
                        new
                        {
                            Id = "57bde49e-8d41-45c4-baea-29141e2b2b6c",
                            Name = "Project manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "92d723f4-81c5-4109-b962-bbec93185fe7",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            RoleId = "ce7db7fd-ba3f-4cc7-8d37-a831b0725379"
                        },
                        new
                        {
                            UserId = "c97575f3-7279-42a7-a52c-8c9c04e5d8b6",
                            RoleId = "57bde49e-8d41-45c4-baea-29141e2b2b6c"
                        },
                        new
                        {
                            UserId = "3c155c25-ef31-41c0-9023-dbf59506d2c2",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        },
                        new
                        {
                            UserId = "efa05cf9-5f6f-41ff-a3b7-a4b2d40739ef",
                            RoleId = "92d723f4-81c5-4109-b962-bbec93185fe7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OutOfOfficeBalance")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeoplePartnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdivision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PeoplePartnerId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ed11de6-d72c-4bda-b867-1cc43c7e8662",
                            EmailConfirmed = false,
                            FullName = "Denis McBoss",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            OutOfOfficeBalance = 15,
                            PasswordHash = "AQAAAAIAAYagAAAAEAzmvnS6b7deoUQpXN4k9dM21NPD1mrP80LteLkLX661sOgWrmjKFRcy2UFAMoPQiQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Administrator",
                            SecurityStamp = "c5e1fae3-05bb-420d-a267-f0277d7b84f6",
                            Status = "Active",
                            Subdivision = "IT",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "91565f7d-00f0-4e36-8b54-0d9210668113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ab0fd36-d2d4-43e6-bb74-8360c00aecc1",
                            EmailConfirmed = false,
                            FullName = "Alyssa Kennedy",
                            LockoutEnabled = false,
                            NormalizedUserName = "HRMANAGER@GMAIL.COM",
                            OutOfOfficeBalance = 15,
                            PasswordHash = "AQAAAAIAAYagAAAAEGUBqZhk/tS0RvP5Ac+dCskP7QI7R1XA7u+bmhsyZ1zGmlLD31Ir3yHrDg8jZGibSA==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "\\photos\\780bde51-e8e8-43ca-8db4-cda2e4ff4248.png",
                            Position = "Hr Manager",
                            SecurityStamp = "aca415a3-0aae-44cc-bc94-9066a5e70695",
                            Status = "Active",
                            Subdivision = "Recruiting",
                            TwoFactorEnabled = false,
                            UserName = "hrmanager@gmail.com"
                        },
                        new
                        {
                            Id = "c97575f3-7279-42a7-a52c-8c9c04e5d8b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a32cf73-4ba7-48d5-a266-311815336f0d",
                            EmailConfirmed = false,
                            FullName = "Oliver Dodger",
                            LockoutEnabled = false,
                            NormalizedUserName = "PROJECTMANAGER@GMAIL.COM",
                            OutOfOfficeBalance = 10,
                            PasswordHash = "AQAAAAIAAYagAAAAEPqdmjCmeXJm+7txaYNHN+flSdK+8hBy0TTCTgRc1vmVlQ9QuVYxrAPxltUvIX8XQg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "\\photos\\16c0f1a5-2d26-4be6-a690-2383571bf409.png",
                            Position = "Project Manager",
                            SecurityStamp = "032c0ec1-37bf-4b7e-868e-1c3d40eb8aa4",
                            Status = "Active",
                            Subdivision = "IT",
                            TwoFactorEnabled = false,
                            UserName = "projectmanager@gmail.com"
                        },
                        new
                        {
                            Id = "3c155c25-ef31-41c0-9023-dbf59506d2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02fbe290-6e82-4246-a0d8-b7b1b4bc6225",
                            EmailConfirmed = false,
                            FullName = "Grace Carney",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE1@GMAIL.COM",
                            OutOfOfficeBalance = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEFLBVrJZcaR2rJjdOMoualp+8WKaCfir6hkYJ8DKx8eN7gC5f+JfjFYb5yc4z+/H8w==",
                            PhoneNumberConfirmed = false,
                            Position = "Programmer",
                            SecurityStamp = "0ff654e2-38cc-45b9-943c-eed2bfe9362b",
                            Status = "Active",
                            Subdivision = "IT",
                            TwoFactorEnabled = false,
                            UserName = "employee1@gmail.com"
                        },
                        new
                        {
                            Id = "efa05cf9-5f6f-41ff-a3b7-a4b2d40739ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e90b94b-5a33-4af8-8f0c-64a98ec89d1d",
                            EmailConfirmed = false,
                            FullName = "Justin Valencia",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE2@GMAIL.COM",
                            OutOfOfficeBalance = 5,
                            PasswordHash = "AQAAAAIAAYagAAAAEFahM5Fqfm4NcFUtUJHqQP7UeV2Fr4ReydoiPqSFUnWfhUKDVikyEidqIytGS1Bc4w==",
                            PhoneNumberConfirmed = false,
                            Position = "Accountant",
                            SecurityStamp = "2dd10d7c-9369-472f-b7fb-99914777bc69",
                            Status = "Active",
                            Subdivision = "Sales",
                            TwoFactorEnabled = false,
                            UserName = "employee2@gmail.com"
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsenceReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequest", (string)null);
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("LeaveRequestId");

                    b.ToTable("LeaveRequestApproval", (string)null);
                });

            modelBuilder.Entity("OutOfOffice.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "PeoplePartner")
                        .WithMany()
                        .HasForeignKey("PeoplePartnerId");

                    b.Navigation("PeoplePartner");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequest", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestApproval", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.LeaveRequest", "LeaveRequest")
                        .WithMany()
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("OutOfOffice.Models.Project", b =>
                {
                    b.HasOne("OutOfOffice.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("OutOfOffice.Models.Employee", b =>
                {
                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
